(DbUtil_JNDI)

package com.ubot.lis.db1;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.naming.Context;
import javax.naming.InitialContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Logger;
import org.apache.tomcat.dbcp.dbcp2.BasicDataSource;



public class DbUtil_JNDI {

	private static final Logger log = (Logger) LogManager.getLogger(DbUtil_JNDI.class);
	
	public Connection conn = null ;
	
	public static int maxCONNESet_JNDI 		= 0 ;	//最大連線值設定
	public static int maxCONNCount_JNDI 	= 0 ;	//最大峰值數	
	public static int ACTIVECount_JNDI 		= 0 ;	//目前連線數
	public static int totalCONNECount_JNDI 	= 0 ;	//每日連線總數
	
	public DbUtil_JNDI(){
		try {
			
			totalCONNECount_JNDI++;
			
			if(conn == null)
				getPoolConnection();
			else if(conn.isClosed())
				getPoolConnection();
			else if(!conn.isValid(1000))
				getPoolConnection();
		} 
		catch (SQLException e) {
			e.printStackTrace();
		}
	}	
	public void getPoolConnection() {
		conn = getJNDIConnection();// new		
	}
	public Connection getJNDIConnection() {
		Connection conn = null;
		try {
			Context ctx = new InitialContext();

			//BasicDataSource ds = (BasicDataSource) ctx.lookup("java:comp/env/jdbc/ebankpaltform");
			BasicDataSource ds = (BasicDataSource) ctx.lookup("java:comp/env/jdbc/newConnLISDB_TEST2");
//			BasicDataSource ds = (BasicDataSource) ctx.lookup("java:comp/env/jdbc/newConnLISDB_TEST");
//			BasicDataSource ds = (BasicDataSource) ctx.lookup("java:comp/env/jdbc/newConnLISDB_UAT");
			
			try {
				conn = ds.getConnection();
			}catch(Exception e) {
				log.info("斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷斷");
			}
			
			maxCONNESet_JNDI = ds.getMaxTotal() ;
			ACTIVECount_JNDI = ds.getNumActive() ;
			
			if(ACTIVECount_JNDI > maxCONNCount_JNDI) maxCONNCount_JNDI = ACTIVECount_JNDI ;
			
			log.info("■ ■ ■ 連線 MAX ACTIVE_JNDI: "+ maxCONNESet_JNDI + "( 最大峰值：" + maxCONNCount_JNDI + " )");
			log.info("■ ■ ■ 連線 ACTIVE_JNDI: "+ ACTIVECount_JNDI);
			log.info("■ ■ ■ 連線 IDLE_JNDI: "+ ds.getNumIdle());
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		return conn;
	}
	
	
	
	public void closeQuietly(ResultSet rs) {
		try { if(rs != null) rs.close(); } catch (Exception e) { e.printStackTrace(); }
	}
	public void closeQuietly( PreparedStatement ps) {
	    try { if(ps != null) ps.close(); } catch (Exception e) { e.printStackTrace(); }
	}
	public void closeQuietly() {
	    try { if(conn != null ) conn.close(); } catch (Exception e) { e.printStackTrace(); }
	}
	
	public static boolean isExistColumn(ResultSet rs, String columnName) {			
		//檢查columnName是否存在
		try {			
			if (rs.findColumn(columnName) > 0 ) { return true ; }			
		}catch(Exception e) {
			return false ;
		}		
		return false ;		
	}
	public static String encodeSPACE(String str) {
		return str ;
	}

	public Connection doClosedAutoCommit() {
		conn = getJNDIConnection();
		try { conn.setAutoCommit(false); } catch (SQLException e) { e.printStackTrace(); }
		System.out.println("[DbUtil_JNDI][Connection][non-static] Transaction Control : Connection AutoCommit set Closed (doClosedAutoCommit):" + conn.toString());

		//TranscationMonitorThread
		/*
		TranscationMonitorThread tmt = new TranscationMonitorThread(conn);
		tmt.start();
		*/
		return conn ;
	}

	public void doCommit(Connection conn_nonstatic1) throws SQLException {

		System.out.println("[DbUtil_JNDI][Connection][non-static] Transaction Control : Connection AutoCommit do Commit (doCommit)[START]:" + conn_nonstatic1.toString());

		conn_nonstatic1.commit();
		conn_nonstatic1.setAutoCommit(true);
		try { if(conn_nonstatic1 != null ) conn_nonstatic1.close(); } catch (Exception e) { e.printStackTrace(); }

		System.out.println("[DbUtil_JNDI][Connection][non-static] Transaction Control : Connection AutoCommit do Commit (doCommit)[END]:" + conn_nonstatic1.toString());
	}
	public void doRollBack(Connection conn_nonstatic1) throws SQLException {

		System.out.println("[DbUtil_JNDI][Connection][non-static] Transaction Control : Connection AutoCommit do RollBack (doRollBack)[START]:" + conn_nonstatic1.toString());

		conn_nonstatic1.rollback();
		conn_nonstatic1.setAutoCommit(true);
		try { if(conn_nonstatic1 != null ) conn_nonstatic1.close(); } catch (Exception e) { e.printStackTrace(); }

		System.out.println("[DbUtil_JNDI][Connection][non-static] Transaction Control : Connection AutoCommit do RollBack (doRollBack)[END]:" + conn_nonstatic1.toString());
	}
}

----------------------------------

(DbUtiltools)

package com.ubot.lis.db1;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Logger;

public class DbUtiltools {
		
	private static final Logger log = (Logger) LogManager.getLogger(DbUtiltools.class);
		
	public static boolean isExistColumn(ResultSet rs, String columnName) {			
		//檢查columnName是否存在
		try { 			
			if (rs.findColumn(columnName) > 0 ) return true ;			
		}catch(Exception e) { return false ; }
		
		return false ;		
	}
	
	public static String encodeSPACE(String str) {
		return str ;
	}	
	
	public void closeQuietly(ResultSet rs) {
		try { if(rs != null) rs.close(); } catch (Exception e) { e.printStackTrace(); }
	}
	public void closeQuietly( PreparedStatement ps) {
	    try { if(ps != null) ps.close(); } catch (Exception e) { e.printStackTrace(); }
	}
}
